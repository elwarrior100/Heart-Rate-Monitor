#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdint.h>
#include <string.h> 					// string manipulation routines
#include <stdlib.h>

#define LCD_Port PORTD					//port do lcd (so a parte alta (bit 7,6,5 e 4))
#define LCD_DPin  DDRD
#define RSPIN PD0					//RS Pin (H: Data L: Instruction Code)
#define ENPIN PD1 					//E Pin (sinal de enable)
#define RED PB1 					//led vermelho
#define IR PB0						//led infravermelho
#define PISCA PB2					//led pisca  pisca
//variaveis

volatile unsigned char cnt1=50;				//conta 500ms (usado para o led piscar )
volatile unsigned char cnt2=30;				//completa os 15s (30 vezes os 500ms)
volatile unsigned char cnt3=4;				//usado para fazer a media de 4 valor para alizar a curva e assim não leu falsos minimos e maximos
volatile int16_t y=0;					//valor antigo da media de IR
volatile int16_t x=0;					//novo valor de media de IR
volatile int16_t  o=0;					//novo valor de media do led vermelho
volatile int16_t p=0;					//valor antigo da media do led vermelho
volatile int16_t b=0;					//media de um conjunto de leituras
volatile unsigned char heart=0;				//conta os minimos do IR registados durante cada 15s
volatile unsigned char piscar=0;			//diz o estado do led pisca *
volatile unsigned char r=0;				//usada para saber se a curva está a decer ou  subir
volatile unsigned char bat=0;				//numero de batimento por minuto
volatile unsigned char genero; 				//usada para saber o denero da pessoa  (0=femenino 1=masculino) *
volatile unsigned char grupo=1;				//usada para saber a que grupo de idades pertence a pessoa
volatile unsigned char volume_sistolico;		//pedende do genero e da idade
volatile int16_t dc=0;					//valor do debito cardiaco
volatile unsigned char flagred=0;			//flag dos leds (0 liga o led vermelho e a 1 liga o IR)*
volatile float maxir=0;				//guarda o valor maximo de IR
volatile float minir=0;				//guarda o valor maximo de IR
volatile float maxred=0;				//guarda o valor maximo de led vermelho
volatile float minred=0;				//guarda o valor minimo do led vermelho
volatile unsigned char AL;				//guarda a parte baixa da leitura do ADC
volatile unsigned char AH;				//guarda a parte alta da leitura do ADC
volatile int16_t ADC_total;				//valor de 16 bit's para juntar a parte alta e a parte baixa do ADC  e assim obter o valor lido
volatile float rr=0;					//usado para calcular O2 depende dos maximos e dos minimos de IR e do led vermalho
volatile float o2=0;					//valor de O2
volatile int16_t media=0;				//media de um conjunto de leituras primeiro alisamento da curva
volatile int16_t leituras=400;				//numero de leituras feitas até fazer a primeira media
volatile char seg =0;					//usada para saber se passaram os 15s *

//prototipos de funções
void init(void);
void LCD_Action( unsigned char cmnd );
void LCD_Clear();
void LCD_Print (char *str);
void LCD_Init (void);
void LCD_Printpos (char row, char pos, char *str);
void delay();
void escreve_linha_2();
void media_leitura_adc_ir();
void grupo_idade();
void genero_();
void volume_sistolico_();
void media_leitura_adc_red();


int main(void)
{
	init();							//inicializações
	LCD_Init(); 						//inicializações do lcd
	genero_();
	volume_sistolico_();
	LCD_Clear();						//limpa tudo que está no lcd e vai para a primeira posição de primeira linha
	LCD_Print("Carrega no select");
	while((PINC & 0b00010000)==0b00010000)			//só sai quando carregam no butão select
	{
		//prender antes no sei
	}

	sei();							//ativa as interrupções começamos a contar o tempo
	ADCSRA |= (1<<ADSC);
	LCD_Clear();
	LCD_Print("Aguarde");
	
	
	while(1)						//ciclo principal
	{
		if(seg==1)					//esperarque passem os 15s
		{
			escreve_linha_2();
		}
		
		if(leituras==0)					//esperar que acabe um conjuto de leituras para fazer a sua media
		{
			if(flagred==0)				//verificar se IR está ligado
			{
				media_leitura_adc_ir();
				ADCSRA |= (1<<ADSC);		//ativar nova leitura do ADC
				//PORTB=0b0000010;		//ligar o led vermelho
				PORTB &=~(1<<IR);		//desligar IR
				PORTB |=(1<<RED);			//ligar o led vermelho
			}
			if(flagred==1)				//verificar se o led vermelho está ligado
			{
				media_leitura_adc_red();
				ADCSRA |= (1<<ADSC);
				//PORTB=0b0000001;
				PORTB &=~(1<<RED);
				PORTB |=(1<<IR);
			}
		}
	}
}
void escreve_linha_2()
{
	LCD_Clear();
	char mostrar[16];
	itoa (bat,mostrar,10);		//converter inteiros para char pois o lcd só recebe char
	LCD_Action(0x01);		//vai para a primeira posição da primeira linha
	LCD_Print("BPM:");		//BPM:XX
	LCD_Print(mostrar);
	int batmenor=bat-3;
	int batmaior=bat+3;
	//char showruntime2 [16];
	itoa (batmenor,mostrar,10);
	char mostrar2 [16];
	itoa (batmaior,mostrar2,10);
	LCD_Print(" ");
	LCD_Print(mostrar);
	LCD_Print("-");
	LCD_Print(mostrar2);		//primeira linha BPM:XX XY-XW
	dc=bat*volume_sistolico;
	//char showruntime1 [16];
	itoa (dc,mostrar,10);
	LCD_Action(0xC0);		//vai para a primeira posição da segunda linha
	LCD_Print("DC:");
	LCD_Print(mostrar);
	LCD_Print("ml");
	LCD_Print(" ");
	//char showruntime4 [16];
	itoa (o2,mostrar2,10);
	LCD_Print(mostrar2);
	LCD_Print(" %");		//segunda linha DC:xxml SS %
	seg=0;
}

void media_leitura_adc_ir()
{
	
	b+=(media/400);				//fazer a media das 450 leituras (primeiro alisamento)
	media=0;				//preparar a variavel para o proximo ciclo de leituras
	leituras=400;				//restabelecer o contador
	cnt3--;
	if (cnt3==0)				//segundo alisamento
	{
		
		x=b/4; 				//juntar 4 conjuntos de medias
		cnt3=4;
		b=0;
		if (x>y)     			//compara com valor anterior que foi lido pelo ADC
		{
			y=x; 			//atualiza a variavel de comparação
			r=0;  			//a curva está a subir
			if(maxir>y)
			{
				maxir=y;	//guarda o maximo dos maximos;
			}
		}
		if (x<y) 			//compara com o valor anterior que foi lido pelo ADC
		{
			y=x;			//atualiza a variavel de comparação
			if (r==0)		//como esta a descer quer dizer que há sangue no dedo
			{
				r=1;		//a currva está a descer
				heart++;	//que irá depois a ser usado para obter os batimentos cardíacos
				if(minir<y)
				{
					minir=y;//guarda o minimo dos minimos
				}
			}
			
		}
		flagred=1;			//avisa que temos que ligar o led vermelho
	}
}

void media_leitura_adc_red()			//em tudo semelhante à media_leitura_adc_ir mas com dados do led vermelho
{						//mas aqui só precisamos de guardar dos valores maximos e minimos
	b+=(media/400);				//sem necessidade de contar os minimos
	media=0;
	leituras=400;
	cnt3--;
	if (cnt3==0)
	{
		o=b/4;
		cnt3=4;
		b=0;
		if (o>p)
		{
			p=o;
			if(maxred>o)
			{
				maxred=o;
			}
		}

		if (o<p)
		{
			o=x;
			if(minred<o)
			{
				minred=o;
			}
			
		}
		flagred=0;
	}
	
}

ISR(TIMER2_COMPA_vect)								//50hz, contar 15 segundos (mas em dente-serra), acontece a cada 10ms
{
	cnt1--;
	if(cnt1==0)								//acontece de 500 em 500ms
	{
		if(piscar==0)							//verifica de o led pisca está desligado
		{
			piscar=1;
			PORTB |=(1<<PISCA);					//liga o led pisca
		}

		if(piscar==1)							//verifica de o led pisca está ligado
		{
			piscar=0;
			PORTB &=~(1<<PISCA);					//desliga o led pisca
		}
		cnt1=50;
		cnt2--;
	}

	if(cnt2==0)								//acontece de 15 em 15s
	{
		seg =1;								//60-----------15
		bat=(heart*60)/15;						//x------------60
		cnt1=50; 							//os batimentos reais são obtidos atraves de uma regra tres simples
		cnt2=30;							//visto de o que temos são ou batimentos que acontecerão em 15s
		heart=0;							//preparar a variavel para outro ciclo
		rr = ((maxred-minred) / minred ) / ((maxir-minir) / minir);	//formula para obter a variavel necessaria para calcular o O2
		o2 = 110 - (25*rr);						//calculo do O2 com base num estudo cientifico e verificado com um oxímetro
	}
}



/*vetor interrupção do adc*/
ISR (ADC_vect)				//as leituras do adc são a 10 bis's para uma melhor leitura o oxigenio
{
	AL = ADCL;			//ler a parte baixa da leitura
	AH = ADCH;			//ler a parte altada leitura
	ADC_total = (AL<<8) + AH;	//juntar a parte alta com a parte baixa para assim obter a leitura
	media += ADC_total;		//juntar todas as leituras num variavel depois usada para calcular a media
	leituras--; 			//fazer ciclos de 450 leituras
	if(leituras!=0)			//se ainda não acabou um ciclo de leituras volta a ligar o ADC
	{
		ADCSRA |= (1<<ADSC);
	}
}

void init(void)
{
	/*configuração dos port's*/
	DDRC = 0x00;  			//port configurado como entrada onde se liga o ADC e 3 switchs
	PORTC = 0b11100010; 		//ativar os pull-ups nas entradas quue não são usadas
	DDRB = 0b00000111;		//bit's 0,1 e 2 configurados como saidas
	PORTB = 0b11111000;		//ativar os pull-ups nas entradas quue não são usadas

	/*configuração do time2 a 50Hz*/

	TCCR2A=0b00000010;		//modo CTC
	TCCR2B=0b00000111;		//prescaler de 1024
	OCR2A=155;			//F=(16000000/(2*1024*(1+155))
	TIMSK2=0b00000010;		//ativar a interrupção
	
	/*configuração do adc*/

	ADMUX |= (1<<REFS0);		//usar AREF como tensão de comparação (5V), ADLAR a 0 para ajustar à direita pois faremos leituras de 10 bits
	ADCSRA = 0b10001111; 		//fator de divisao de 128, ativar a interrupção
}

void LCD_Init (void)
{
	LCD_DPin = 0xFF;		// defenir on portd como saida
	delay();			//é necessario esperar antes de o ativar então usamos um delay
	LCD_Action(0x02);		//só vamos usar 4 bits para escrever no lcd
	LCD_Action(0x28);
	LCD_Action(0x0c);       	//desativar o cursor do lcd
	LCD_Action(0x06);
	LCD_Action(0x01);       	//limpar o lcd
	delay();
}
void delay()
{										//delay de 4ms //o lcd precisa de um delay
	TCCR0A	|= (1 << WGM01) | (1 << WGM00);						//Fast PWM com TOP=0xFF
	TCCR0B 	|=  (0 << WGM02) | (1 << CS02) | (0 << CS01) | (0 << CS00); 		//prescaler 256;
	while ((TIFR0 &(1 << OCIE0A ))==0);						//
	TIFR0=(1<<OCIE0A);
}

void LCD_Print (char *str)
{
	int i;
	for(i=0; str[i]!=0; i++)					//um ciclo do tamanho da sting que se pretende enviar para o lcd
	{								//enviar char a char e 4 bits de cada vez
		LCD_Port = (LCD_Port & 0x0F) | (str[i] & 0xF0);		//enviar a parte alta
		LCD_Port |= (1<<RSPIN);					//RS=1 envio de informação
		LCD_Port|= (1<<ENPIN);
		delay();
		LCD_Port &= ~ (1<<ENPIN);
		delay();
		LCD_Port = (LCD_Port & 0x0F) | (str[i] << 4);		//enviara parte baixa
		LCD_Port |= (1<<ENPIN);
		delay();
		LCD_Port &= ~ (1<<ENPIN);
		delay();
	}
}

void LCD_Action( unsigned char cmnd )				//envia ações para o lcd
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);		//envia a parte alta da instrução
	LCD_Port &= ~ (1<<RSPIN);				//RS=0 então o lcd sabe que está a receber um instroção
	LCD_Port |= (1<<ENPIN);
	delay();
	LCD_Port &= ~ (1<<ENPIN);
	delay();
	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);		//envia a parte baixa da instrução
	LCD_Port |= (1<<ENPIN);
	delay();
	LCD_Port &= ~ (1<<ENPIN);
	delay();
}

void LCD_Clear()			//função para limpar o lcd pois vai ser usada varias vezes
{
	LCD_Action (0x01);		//apaga tudo que está no lcd
	delay();
	LCD_Action (0x80);		//põe o cursor na primeira posição da primeira linha
}

void genero_()
{
	LCD_Clear();
	delay();
	LCD_Print("Escolha o genero");
	LCD_Action(0xC0);
	LCD_Print("+=>M -=>F");
	
	while((PINC & 0b00010000)==0b00010000)			//não sai deste while enquanto não primirem o butão select
	{
		if ((PINC & 0b00001000)==0b00000000)		//verificar se carregam no butão mais
		{
			delay();
			genero=1;
			LCD_Clear();
			LCD_Print("Masculino");
		}
		if ((PINC & 0b00000100)==0b00000000)		//verificar se carregam no butão menos
		{
			delay();
			genero=0;
			LCD_Clear();
			LCD_Print("Feminino");
		}
	}
	
	LCD_Clear();
	delay();
	LCD_Print("Idades");
}

void volume_sistolico_()
{
	delay();
	while((PINC & 0b00010000)==0b00010000)			//não sai deste while enquanto não primirem o butão select
	{
		if ((PINC & 0b00001000)==0b00000000)		//verificar se carregam no butão mais
		{
			delay();				//se não der apagar este delay estava comentado mas acho que faz sentido
			grupo++;
			if (grupo==7)
			{
				grupo=1;
			}
			grupo_idade();
		}
		if ((PINC & 0b00000100)==0b00000000)		//verificar se carregam no butão menos
		{
			delay();				////se não der apagar este delay
			grupo-- ;
			if (grupo==0)
			{
				grupo=6;
			}

			grupo_idade();
		}
	}
}
void grupo_idade()						//esta função dependendo da idade e do genero escolhido na função volume_sistolico_
{								//vai defenir o volume sistolico da pessoa usado para calcular o debito cardiaco
	if (grupo==1)
	{
		LCD_Clear();
		delay();
		LCD_Print("Idade 0-29 anos");
		if(genero==1)					//masculino
		{
			volume_sistolico=51;
		}
		if(genero==0)
		{
			volume_sistolico=35;
		}
	}

	if (grupo==2)
	{
		LCD_Clear();
		delay();
		LCD_Print("Idade 30-39 anos");
		if(genero==1)
		{
			volume_sistolico=45;
		}
		else
		{
			volume_sistolico=31;
		}
	}

	if (grupo==3)
	{
		LCD_Clear();
		delay();
		LCD_Print("Idade 40-49 anos");
		if(genero==1)
		{
			volume_sistolico=40;
		}
		else
		{
			volume_sistolico=30;
		}
	}

	if (grupo==4)
	{
		LCD_Clear();
		delay();
		LCD_Print("Idade 50-59 anos");
		if(genero==1)
		{
			volume_sistolico=37;
		}
		else
		{
			volume_sistolico=29;
		}
	}

	if (grupo==5)
	{
		LCD_Clear();
		delay();
		LCD_Print("Idade 60-69 anos");
		if(genero==1)
		{
			volume_sistolico=37;
		}
		else
		{
			volume_sistolico=30;
		}
	}

	if (grupo==6)
	{
		LCD_Clear();
		delay();
		LCD_Print("Idade 70=+ anos");
		if(genero==1)
		{
			volume_sistolico=34;
		}
		else
		{
			volume_sistolico=20;
		}
	}
}
